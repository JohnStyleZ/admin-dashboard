<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Analytics</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { font-family: 'Segoe UI', sans-serif; background-color: #f7f9fc; }
    .sidebar { width: 250px; height: 100vh; background-color: #343a40; position: fixed; color: #fff; z-index: 100; }
    .sidebar h2 { padding: 20px; font-size: 20px; background-color: #212529; margin: 0; }
    .sidebar a { color: #adb5bd; display: block; padding: 15px 20px; text-decoration: none; }
    .sidebar a:hover, .sidebar a.active { background-color: #495057; color: #fff; }
    .sidebar a i { margin-right: 10px; }
    .main { margin-left: 250px; padding: 30px; }
    .card { border: none; border-radius: 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.05); }
    .summary-card { height: 100%; transition: all 0.2s; }
    .summary-card:hover { transform: translateY(-5px); box-shadow: 0 8px 15px rgba(0,0,0,0.1); }
    .summary-value { font-size: 2rem; font-weight: bold; }
  </style>
</head>
<body>
<div class="sidebar">
  <h2><i class="bi bi-speedometer2"></i> Admin Panel</h2>
  <a href="/admin/dashboard"><i class="bi bi-house-door"></i> Dashboard</a>
  <a href="/admin/analytics" class="<%= title === 'Analytics' ? 'active' : '' %>"><i class="bi bi-bar-chart"></i> Analytics</a>
  <a href="/admin/reports" class="<%= title === 'Reports' ? 'active' : '' %>"><i class="bi bi-file-text"></i> Reports</a>
  <a href="/admin/settings" class="<%= title === 'Settings' ? 'active' : '' %>"><i class="bi bi-gear"></i> Settings</a>
  <a href="/admin/logout"><i class="bi bi-box-arrow-right"></i> Logout</a>
</div>

<div class="main p-4">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-bar-chart"></i> Analytics</h2>
    <div class="btn-group">
      <button class="btn btn-outline-primary" id="thisMonth">This Month</button>
      <button class="btn btn-outline-primary" id="last3Months">Last 3 Months</button>
      <button class="btn btn-outline-primary active" id="allTime">All Time</button>
    </div>
  </div>

  <!-- Summary Cards Row -->
  <div class="row g-4 mb-4">
    <div class="col-md-3">
      <div class="card p-3 summary-card bg-primary bg-opacity-10">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <p class="mb-0 text-primary">Total Sessions</p>
            <div class="summary-value"><%= totalSessionsCount || 0 %></div>
          </div>
          <i class="bi bi-calendar2-event text-primary fs-1 opacity-25"></i>
        </div>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card p-3 summary-card bg-success bg-opacity-10">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <p class="mb-0 text-success">Average Cost</p>
            <div class="summary-value">$<%= (avgCostPerSession || 0).toFixed(2) %></div>
          </div>
          <i class="bi bi-currency-dollar text-success fs-1 opacity-25"></i>
        </div>
        <small>per session</small>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card p-3 summary-card bg-info bg-opacity-10">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <p class="mb-0 text-info">Average Duration</p>
            <div class="summary-value"><%= avgDuration || '0.0' %></div>
          </div>
          <i class="bi bi-hourglass-split text-info fs-1 opacity-25"></i>
        </div>
        <small>hours per session</small>
      </div>
    </div>
    <div class="col-md-3">
      <div class="card p-3 summary-card bg-warning bg-opacity-10">
        <div class="d-flex justify-content-between align-items-center">
          <div>
            <p class="mb-0 text-warning">Cost Per Person</p>
            <div class="summary-value">$<%= (avgCostPerPerson || 0).toFixed(2) %></div>
          </div>
          <i class="bi bi-person-fill text-warning fs-1 opacity-25"></i>
        </div>
        <small>average</small>
      </div>
    </div>
  </div>

  <div class="row g-4">
    <!-- Cost Over Time -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <div class="d-flex justify-content-between align-items-center mb-3">
          <h5 class="mb-0"><i class="bi bi-graph-up"></i> Spending Over Time</h5>
          <select id="timeFrameSelect" class="form-select form-select-sm w-auto">
            <option value="weekly">Weekly</option>
            <option value="monthly" selected>Monthly</option>
            <option value="quarterly">Quarterly</option>
          </select>
        </div>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="spendingTimeChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Cost Per Person Distribution -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5 class="mb-0"><i class="bi bi-cash-coin"></i> Cost Per Person Distribution</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="costDistributionChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Weekday Analysis -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-calendar-week"></i> Weekday Analysis</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="weekdayChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Session Duration vs Cost -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-hourglass-split"></i> Session Duration vs Cost</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="durationCostChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Top Locations -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-geo-alt"></i> Top Locations by Usage</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="locationsChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Group Size Impact -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-people"></i> Group Size Impact on Cost</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="groupSizeCostChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Peak Hours -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-clock"></i> Peak Usage Hours</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="peakHoursChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Cost Savings Analysis -->
    <div class="col-md-6">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-piggy-bank"></i> Potential Cost Savings</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="savingsChart"></canvas>
        </div>
      </div>
    </div>

    <!-- Seasonal Trends -->
    <div class="col-md-12">
      <div class="card p-3 shadow-sm">
        <h5><i class="bi bi-calendar3"></i> Seasonal Cost Trends</h5>
        <div style="height: 300px; display: flex; justify-content: center; align-items: center;">
          <canvas id="seasonalTrendsChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script>
  // Ensure we have fallback values for all data
  const peakData = <%- JSON.stringify(peakHours || []) %>;
  const durationData = <%- JSON.stringify(durationBuckets || []) %>;
  const groupSizeData = <%- JSON.stringify(groupSizes || []) %>;
  const genderTrends = <%- JSON.stringify(genderTrends || []) %>;
  const returnData = <%- JSON.stringify(newVsReturning || []) %>;
  const sessionsPerMonth = <%- JSON.stringify(sessionsPerMonth || []) %>;
  const spendingPerMonth = <%- JSON.stringify(spendingPerMonth || []) %>;
  const weekdayData = <%- JSON.stringify(weekdayAnalysis || []) %>;
  const costDistributionData = <%- JSON.stringify(costDistribution || []) %>;
  const locationData = <%- JSON.stringify(locationUsage || []) %>;
  const groupSizeCostData = <%- JSON.stringify(groupSizeCost || []) %>;
  const durationCostData = <%- JSON.stringify(durationCost || []) %>;
  const seasonalTrendsData = <%- JSON.stringify(seasonalTrends || []) %>;

  // Create months array for charts
  const months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
  const currentMonth = new Date().getMonth();
  
  // Convert weekday numbers to names
  const weekdayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
  
  // Format cost distribution labels
  function formatCostRange(bucket) {
    const min = (bucket - 1) * 10;
    const max = bucket * 10;
    return `$${min}-${max}`;
  }

  // Render the charts
  new Chart(document.getElementById('spendingTimeChart'), {
    type: 'line',
    data: {
      labels: spendingPerMonth.map(r => r.month),
      datasets: [{ 
        label: 'Total Spent ($)',
        data: spendingPerMonth.map(r => parseFloat(r.total_spent || 0)),
        borderColor: '#fd7e14',
        backgroundColor: 'rgba(253, 126, 20, 0.1)',
        borderWidth: 2,
        tension: 0.3,
        fill: true
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { display: false }
      }
    }
  });

  new Chart(document.getElementById('weekdayChart'), {
    type: 'bar',
    data: {
      labels: weekdayData.map(d => weekdayNames[parseInt(d.day_of_week)]),
      datasets: [
        {
          label: 'Sessions',
          data: weekdayData.map(d => parseInt(d.session_count)),
          backgroundColor: 'rgba(13, 110, 253, 0.5)',
          borderColor: '#0d6efd',
          borderWidth: 1,
          yAxisID: 'y'
        },
        {
          label: 'Average Cost ($)',
          data: weekdayData.map(d => {
            const sessionCount = parseInt(d.session_count);
            const totalCost = parseFloat(d.total_cost);
            return sessionCount > 0 ? parseFloat((totalCost / sessionCount).toFixed(2)) : 0;
          }),
          backgroundColor: 'rgba(220, 53, 69, 0.5)',
          borderColor: '#dc3545',
          borderWidth: 1,
          type: 'line',
          yAxisID: 'y1'
        }
      ]
    },
    options: {
      responsive: true,
      scales: {
        y: {
          type: 'linear',
          position: 'left',
          title: { display: true, text: 'Session Count' }
        },
        y1: {
          type: 'linear',
          position: 'right',
          title: { display: true, text: 'Avg Cost per Session ($)' },
          grid: { drawOnChartArea: false }
        }
      }
    }
  });

  new Chart(document.getElementById('locationsChart'), {
    type: 'bar',
    data: {
      labels: locationData.map(r => r.name),
      datasets: [{
        label: 'Sessions',
        data: locationData.map(r => parseInt(r.session_count)),
        backgroundColor: 'rgba(32, 201, 151, 0.5)'
      }, {
        label: 'Total Cost ($)',
        data: locationData.map(r => parseFloat(r.total_cost)),
        backgroundColor: 'rgba(13, 202, 240, 0.5)',
        borderWidth: 1
      }]
    },
    options: {
      responsive: true,
      plugins: {
        legend: { position: 'top' }
      }
    }
  });

  new Chart(document.getElementById('groupSizeCostChart'), {
    type: 'line',
    data: {
      labels: groupSizeCostData.map(r => parseInt(r.group_size)),
      datasets: [{
        label: 'Cost Per Person ($)',
        data: groupSizeCostData.map(r => parseFloat(r.avg_cost_per_person).toFixed(2)),
        borderColor: '#20c997',
        backgroundColor: 'rgba(32, 201, 151, 0.1)',
        fill: true,
        tension: 0.3
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { display: false } },
      scales: {
        x: { title: { display: true, text: 'Group Size (people)' } },
        y: { title: { display: true, text: 'Cost Per Person ($)' } }
      }
    }
  });

  new Chart(document.getElementById('peakHoursChart'), {
    type: 'bar',
    data: {
      labels: peakData.map(d => `${d.hour}:00`),
      datasets: [{
        label: 'Session Count',
        data: peakData.map(d => parseInt(d.total)),
        backgroundColor: 'rgba(111, 66, 193, 0.7)'
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { display: false } }
    }
  });

  new Chart(document.getElementById('seasonalTrendsChart'), {
    type: 'line',
    data: {
      labels: seasonalTrendsData.map(d => months[parseInt(d.month) - 1]),
      datasets: [{
        label: 'Monthly Spending ($)',
        data: seasonalTrendsData.map(d => parseFloat(d.total_cost)),
        borderColor: '#fd7e14',
        backgroundColor: 'rgba(253, 126, 20, 0.1)',
        fill: true,
        tension: 0.4
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { display: false } }
    }
  });

  new Chart(document.getElementById('durationCostChart'), {
    type: 'scatter',
    data: {
      datasets: [{
        label: 'Sessions',
        data: durationCostData.map(d => ({
          x: parseFloat(d.duration_hours),
          y: parseFloat(d.adjusted_cost)
        })),
        backgroundColor: 'rgba(13, 110, 253, 0.7)',
        borderColor: '#0d6efd',
        pointRadius: 6
      }]
    },
    options: {
      responsive: true,
      scales: {
        x: { 
          title: { display: true, text: 'Duration (hours)' },
          min: 0
        },
        y: { 
          title: { display: true, text: 'Cost ($)' },
          min: 0
        }
      }
    }
  });

  new Chart(document.getElementById('costDistributionChart'), {
    type: 'bar',
    data: {
      labels: costDistributionData.map(d => formatCostRange(parseInt(d.cost_bucket))),
      datasets: [{
        label: 'Number of People',
        data: costDistributionData.map(d => parseInt(d.count)),
        backgroundColor: 'rgba(32, 201, 151, 0.7)'
      }]
    },
    options: {
      responsive: true,
      plugins: { legend: { display: false } },
      scales: {
        x: { title: { display: true, text: 'Cost Range per Person' } },
        y: { title: { display: true, text: 'Number of People' } }
      }
    }
  });

  // Create savings analysis chart with static data since this is calculated advice
  const savingsAnalysis = {
    categories: ['Peak vs Off-Peak', 'Weekday vs Weekend', 'Group Size Optimization', 'Duration Planning', 'Location Choice'],
    potential: [25, 20, 15, 10, 8] // Percentage of potential savings
  };
  
  new Chart(document.getElementById('savingsChart'), {
    type: 'bar',
    data: {
      labels: savingsAnalysis.categories,
      datasets: [{
        label: 'Potential Savings (%)',
        data: savingsAnalysis.potential,
        backgroundColor: [
          'rgba(13, 110, 253, 0.7)',
          'rgba(220, 53, 69, 0.7)',
          'rgba(255, 193, 7, 0.7)',
          'rgba(32, 201, 151, 0.7)',
          'rgba(13, 202, 240, 0.7)'
        ]
      }]
    },
    options: {
      responsive: true,
      indexAxis: 'y',
      plugins: { legend: { display: false } }
    }
  });

  // Time period selectors
  document.getElementById('thisMonth').addEventListener('click', function() {
    this.classList.add('active');
    document.getElementById('last3Months').classList.remove('active');
    document.getElementById('allTime').classList.remove('active');
    // Filter data by this month (would update charts with filtered data)
  });

  document.getElementById('last3Months').addEventListener('click', function() {
    this.classList.add('active');
    document.getElementById('thisMonth').classList.remove('active');
    document.getElementById('allTime').classList.remove('active');
    // Filter data by last 3 months
  });

  document.getElementById('allTime').addEventListener('click', function() {
    this.classList.add('active');
    document.getElementById('thisMonth').classList.remove('active');
    document.getElementById('last3Months').classList.remove('active');
    // Show all data
  });

  // Time frame selector for spending chart
  document.getElementById('timeFrameSelect').addEventListener('change', function() {
    // Would update chart based on selected time frame
  });
</script>
</body>
</html>
