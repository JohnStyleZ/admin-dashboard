<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0"/>
  <title>Analytics Dashboard</title>
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet"/>
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css">
  <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
  <style>
    body { 
      font-family: 'Segoe UI', sans-serif; 
      background-color: #f7f9fc;
      min-height: 100vh;
      display: flex;
      flex-direction: column;
    }
    .sidebar { 
      width: 250px; 
      height: 100vh; 
      background-color: #343a40; 
      position: fixed; 
      color: #fff; 
      z-index: 100;
      transition: all 0.3s ease;
    }
    .sidebar h2 { padding: 20px; font-size: 20px; background-color: #212529; margin: 0; }
    .sidebar a { color: #adb5bd; display: block; padding: 15px 20px; text-decoration: none; }
    .sidebar a:hover, .sidebar a.active { background-color: #495057; color: #fff; }
    .sidebar a i { margin-right: 10px; }
    .main { 
      margin-left: 250px; 
      padding: 30px;
      transition: margin-left 0.3s ease;
      width: calc(100% - 250px);
    }
    .card { 
      border: none; 
      border-radius: 10px; 
      box-shadow: 0 4px 6px rgba(0,0,0,0.05); 
      transition: all 0.3s; 
      margin-bottom: 20px;
    }
    
    /* Mobile navbar */
    .mobile-nav {
      display: none;
      background-color: #343a40;
      padding: 10px 15px;
      position: fixed;
      top: 0;
      width: 100%;
      z-index: 101;
    }
    .mobile-nav-title {
      color: white;
      font-size: 18px;
      display: flex;
      align-items: center;
    }
    .mobile-nav-title i {
      margin-right: 10px;
    }
    .menu-toggle {
      background: none;
      border: none;
      color: white;
      font-size: 24px;
      cursor: pointer;
    }
    
    /* Responsive styles */
    @media (max-width: 991.98px) {
      .mobile-nav {
        display: flex;
        justify-content: space-between;
        align-items: center;
      }
      .sidebar {
        transform: translateX(-100%);
        box-shadow: 0 0 15px rgba(0,0,0,0.2);
      }
      .sidebar.active {
        transform: translateX(0);
      }
      .main {
        margin-left: 0;
        width: 100%;
        padding: 70px 15px 15px 15px;
      }
      canvas {
        max-width: 100%;
      }
      /* Make charts responsive */
      .chart-container {
        position: relative;
        height: 300px;
        width: 100%;
      }
      /* Adjust filters for mobile */
      .filters-row {
        flex-direction: column;
      }
      .filters-row .form-group {
        margin-bottom: 10px;
        width: 100%;
      }
      /* Adjust header for mobile */
      .d-flex.justify-content-between.align-items-center {
        flex-direction: column;
        align-items: flex-start !important;
      }
      .d-flex.justify-content-between.align-items-center > div {
        margin-top: 15px;
        width: 100%;
      }
    }
    
    @media (max-width: 575.98px) {
      .card {
        padding: 15px !important;
      }
      h2, h3 {
        font-size: 1.5rem;
      }
      .chart-title {
        font-size: 1.2rem;
      }
    }
  </style>
</head>
<body>

<!-- Mobile Navigation Bar -->
<div class="mobile-nav">
  <button class="menu-toggle" id="sidebarToggle">
    <i class="bi bi-list"></i>
  </button>
  <div class="mobile-nav-title">
    <i class="bi bi-music-note-beamed"></i>
    K-Cal Admin
  </div>
  <div style="width: 24px;">
    <!-- Placeholder to center the title -->
  </div>
</div>

<!-- Sidebar -->
<div class="sidebar" id="sidebar">
  <h2><i class="bi bi-speedometer2"></i> Admin Panel</h2>
  <a href="/admin/dashboard"><i class="bi bi-house-door"></i> Dashboard</a>
  <a class="active" href="/admin/analytics"><i class="bi bi-bar-chart"></i> Analytics</a>
  <a href="/admin/reports"><i class="bi bi-file-text"></i> Reports</a>
  <a href="/admin/settings"><i class="bi bi-gear"></i> Settings</a>
  <a href="/admin/logout"><i class="bi bi-box-arrow-right"></i> Logout</a>
</div>

<div class="main">
  <div class="d-flex justify-content-between align-items-center mb-4">
    <h2>Analytics Dashboard <i class="bi bi-graph-up text-primary"></i></h2>
    <div class="d-flex filters-row">
      <div class="form-group me-2">
        <select class="form-select" id="timeRangeFilter">
          <option value="last30">Last 30 Days</option>
          <option value="last90">Last 90 Days</option>
          <option value="last180">Last 180 Days</option>
          <option value="last365">Last 365 Days</option>
          <option value="all">All Time</option>
        </select>
      </div>
      <button class="btn btn-primary" id="applyFilters">
        <i class="bi bi-funnel"></i> Apply Filters
      </button>
    </div>
  </div>

  <!-- Key Metrics Row -->
  <div class="row mb-4">
    <div class="col-md-6 col-lg-3 mb-3 mb-lg-0">
      <div class="card p-3">
        <div class="d-flex justify-content-between">
          <div>
            <h6 class="text-muted mb-1">Total Sessions</h6>
            <h3 class="mb-0"><%= totalSessionsCount || 0 %></h3>
          </div>
          <div class="text-primary" style="font-size: 2rem;">
            <i class="bi bi-calendar-check"></i>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-6 col-lg-3 mb-3 mb-lg-0">
      <div class="card p-3">
        <div class="d-flex justify-content-between">
          <div>
            <h6 class="text-muted mb-1">Avg Cost per Session</h6>
            <h3 class="mb-0">$<%= avgCostPerSession || 0 %></h3>
          </div>
          <div class="text-success" style="font-size: 2rem;">
            <i class="bi bi-currency-dollar"></i>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-6 col-lg-3 mb-3 mb-lg-0">
      <div class="card p-3">
        <div class="d-flex justify-content-between">
          <div>
            <h6 class="text-muted mb-1">Avg Duration</h6>
            <h3 class="mb-0"><%= avgDuration || 0 %> min</h3>
          </div>
          <div class="text-warning" style="font-size: 2rem;">
            <i class="bi bi-clock"></i>
          </div>
        </div>
      </div>
    </div>
    <div class="col-md-6 col-lg-3">
      <div class="card p-3">
        <div class="d-flex justify-content-between">
          <div>
            <h6 class="text-muted mb-1">Avg Cost per Person</h6>
            <h3 class="mb-0">$<%= avgCostPerPerson || 0 %></h3>
          </div>
          <div class="text-info" style="font-size: 2rem;">
            <i class="bi bi-person"></i>
          </div>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts Row 1 - Cost Trends & Seasonal Trends -->
  <div class="row mb-4">
    <div class="col-lg-6 mb-4 mb-lg-0">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-graph-up-arrow"></i> Cost & Attendance Trends</h5>
        <div class="chart-container">
          <canvas id="costTrendChart"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-thermometer-sun"></i> Seasonal Trends</h5>
        <div class="chart-container">
          <canvas id="seasonalTrendsChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts Row 2 - Weekday Analysis & Duration Distribution -->
  <div class="row mb-4">
    <div class="col-lg-6 mb-4 mb-lg-0">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-calendar-week"></i> Weekday Analysis</h5>
        <div class="chart-container">
          <canvas id="weekdayAnalysisChart"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-stopwatch"></i> Duration vs Cost</h5>
        <div class="chart-container">
          <canvas id="durationCostChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts Row 3 - Savings & Cost Distribution -->
  <div class="row mb-4">
    <div class="col-lg-6 mb-4 mb-lg-0">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-piggy-bank"></i> Savings Analysis</h5>
        <div class="chart-container">
          <canvas id="savingsAnalysisChart"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-cash-stack"></i> Cost Distribution</h5>
        <div class="chart-container">
          <canvas id="costDistributionChart"></canvas>
        </div>
      </div>
    </div>
  </div>

  <!-- Charts Row 4 - Location Usage & Group Size Impact -->
  <div class="row mb-4">
    <div class="col-lg-6 mb-4 mb-lg-0">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-geo-alt"></i> Location Usage</h5>
        <div class="chart-container">
          <canvas id="locationUsageChart"></canvas>
        </div>
      </div>
    </div>
    <div class="col-lg-6">
      <div class="card p-3">
        <h5 class="chart-title mb-3"><i class="bi bi-people"></i> Group Size Impact</h5>
        <div class="chart-container">
          <canvas id="groupSizeCostChart"></canvas>
        </div>
      </div>
    </div>
  </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Sidebar toggle functionality for mobile
    const sidebarToggle = document.getElementById('sidebarToggle');
    const sidebar = document.getElementById('sidebar');
    
    sidebarToggle.addEventListener('click', function() {
      sidebar.classList.toggle('active');
    });
    
    // Close sidebar when clicking on a link (for mobile)
    const sidebarLinks = document.querySelectorAll('.sidebar a');
    sidebarLinks.forEach(link => {
      link.addEventListener('click', function() {
        if (window.innerWidth < 992) {
          sidebar.classList.remove('active');
        }
      });
    });
    
    // Close sidebar when clicking outside (for mobile)
    document.addEventListener('click', function(event) {
      if (window.innerWidth < 992) {
        if (!sidebar.contains(event.target) && !sidebarToggle.contains(event.target)) {
          sidebar.classList.remove('active');
        }
      }
    });

    // Define month names array for charts
    const monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];
    
    // Weekday mapping
    const weekdayNames = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
    
    // Format labels for cost distribution
    function formatCostLabel(value) {
      if (value === 1) return '$0-50';
      if (value === 2) return '$51-100';
      if (value === 3) return '$101-150';
      if (value === 4) return '$151-200';
      if (value === 5) return '$201-250';
      if (value === 6) return '$251-300';
      if (value === 7) return '$301+';
      return 'Range ' + value;
    }
    
    // Data for charts with fallbacks
    const sessionsPerMonth = <%- JSON.stringify(sessionsPerMonth || []) %>;
    const spendingPerMonth = <%- JSON.stringify(spendingPerMonth || []) %>;
    const seasonalTrends = <%- JSON.stringify(seasonalTrends || []) %>;
    const weekdayAnalysis = <%- JSON.stringify(weekdayAnalysis || []) %>;
    const costDistribution = <%- JSON.stringify(costDistribution || []) %>;
    const locationUsage = <%- JSON.stringify(locationUsage || []) %>;
    const groupSizeCost = <%- JSON.stringify(groupSizeCost || []) %>;
    const durationCost = <%- JSON.stringify(durationCost || []) %>;
    
    // Cost Trends Chart
    const costTrendCtx = document.getElementById('costTrendChart').getContext('2d');
    new Chart(costTrendCtx, {
      type: 'line',
      data: {
        labels: sessionsPerMonth.map(item => monthNames[item.month - 1]),
        datasets: [
          {
            label: 'Sessions',
            data: sessionsPerMonth.map(item => item.count),
            borderColor: 'rgba(54, 162, 235, 1)',
            backgroundColor: 'rgba(54, 162, 235, 0.1)',
            borderWidth: 2,
            fill: true,
            yAxisID: 'y',
            tension: 0.4
          },
          {
            label: 'Spending ($)',
            data: spendingPerMonth.map(item => item.total),
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.1)',
            borderWidth: 2,
            fill: true,
            yAxisID: 'y1',
            tension: 0.4
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            title: {
              display: true,
              text: 'Sessions'
            },
            beginAtZero: true
          },
          y1: {
            position: 'right',
            title: {
              display: true,
              text: 'Cost ($)'
            },
            beginAtZero: true,
            grid: {
              drawOnChartArea: false
            }
          }
        }
      }
    });

    // Seasonal Trends Chart
    const seasonalTrendsCtx = document.getElementById('seasonalTrendsChart').getContext('2d');
    new Chart(seasonalTrendsCtx, {
      type: 'bar',
      data: {
        labels: seasonalTrends.map(item => {
          const month = parseInt(item.month);
          return monthNames[month - 1];
        }),
        datasets: [
          {
            label: 'Avg Cost ($)',
            data: seasonalTrends.map(item => item.avg_cost),
            backgroundColor: 'rgba(255, 159, 64, 0.7)'
          },
          {
            label: 'Avg Attendance',
            data: seasonalTrends.map(item => item.avg_attendance),
            backgroundColor: 'rgba(153, 102, 255, 0.7)'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Weekday Analysis Chart
    const weekdayAnalysisCtx = document.getElementById('weekdayAnalysisChart').getContext('2d');
    new Chart(weekdayAnalysisCtx, {
      type: 'bar',
      data: {
        labels: weekdayAnalysis.map(item => weekdayNames[item.weekday]),
        datasets: [
          {
            label: 'Avg Cost ($)',
            data: weekdayAnalysis.map(item => item.avg_cost),
            backgroundColor: 'rgba(54, 162, 235, 0.7)',
            yAxisID: 'y'
          },
          {
            label: 'Session Count',
            data: weekdayAnalysis.map(item => item.count),
            backgroundColor: 'rgba(75, 192, 192, 0.7)',
            borderWidth: 1,
            type: 'line',
            fill: false,
            yAxisID: 'y1'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Average Cost ($)'
            }
          },
          y1: {
            position: 'right',
            beginAtZero: true,
            title: {
              display: true,
              text: 'Session Count'
            },
            grid: {
              drawOnChartArea: false
            }
          }
        }
      }
    });

    // Duration vs Cost Chart
    const durationCostCtx = document.getElementById('durationCostChart').getContext('2d');
    new Chart(durationCostCtx, {
      type: 'scatter',
      data: {
        datasets: [{
          label: 'Sessions',
          data: durationCost.map(item => ({ x: item.duration, y: item.total_cost })),
          backgroundColor: 'rgba(255, 99, 132, 0.7)',
          borderColor: 'rgba(255, 99, 132, 1)',
          pointRadius: 6,
          pointHoverRadius: 8
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          x: {
            title: {
              display: true,
              text: 'Duration (minutes)'
            }
          },
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Total Cost ($)'
            }
          }
        }
      }
    });

    // Savings Analysis Chart (static data for now)
    const savingsAnalysisCtx = document.getElementById('savingsAnalysisChart').getContext('2d');
    new Chart(savingsAnalysisCtx, {
      type: 'bar',
      data: {
        labels: ['Peak vs Off-Peak', 'Weekday vs Weekend', 'Group Size Optimization', 'Duration Planning', 'Location Choice'],
        datasets: [{
          label: 'Potential Savings (%)',
          data: [25, 20, 15, 10, 8],
          backgroundColor: 'rgba(75, 192, 192, 0.7)',
          borderColor: 'rgba(75, 192, 192, 1)',
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        indexAxis: 'y',
        scales: {
          x: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Percentage (%)'
            }
          }
        },
        plugins: {
          legend: {
            display: false
          }
        }
      }
    });

    // Cost Distribution Chart
    const costDistributionCtx = document.getElementById('costDistributionChart').getContext('2d');
    new Chart(costDistributionCtx, {
      type: 'pie',
      data: {
        labels: costDistribution.map(item => formatCostLabel(item.range)),
        datasets: [{
          data: costDistribution.map(item => item.count),
          backgroundColor: [
            'rgba(255, 99, 132, 0.7)',
            'rgba(54, 162, 235, 0.7)',
            'rgba(255, 206, 86, 0.7)',
            'rgba(75, 192, 192, 0.7)',
            'rgba(153, 102, 255, 0.7)',
            'rgba(255, 159, 64, 0.7)',
            'rgba(199, 199, 199, 0.7)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        plugins: {
          legend: {
            position: 'right'
          }
        }
      }
    });

    // Location Usage Chart
    const locationUsageCtx = document.getElementById('locationUsageChart').getContext('2d');
    new Chart(locationUsageCtx, {
      type: 'bar',
      data: {
        labels: locationUsage.map(item => item.location || 'Unknown'),
        datasets: [
          {
            label: 'Session Count',
            data: locationUsage.map(item => item.count),
            backgroundColor: 'rgba(54, 162, 235, 0.7)'
          },
          {
            label: 'Avg Cost ($)',
            data: locationUsage.map(item => item.avg_cost),
            backgroundColor: 'rgba(255, 99, 132, 0.7)'
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });

    // Group Size Impact Chart
    const groupSizeCostCtx = document.getElementById('groupSizeCostChart').getContext('2d');
    new Chart(groupSizeCostCtx, {
      type: 'line',
      data: {
        labels: groupSizeCost.map(item => `${item.group_size} people`),
        datasets: [
          {
            label: 'Avg Cost per Person ($)',
            data: groupSizeCost.map(item => item.avg_cost_per_person),
            borderColor: 'rgba(75, 192, 192, 1)',
            backgroundColor: 'rgba(75, 192, 192, 0.1)',
            fill: true,
            tension: 0.4
          },
          {
            label: 'Total Avg Cost ($)',
            data: groupSizeCost.map(item => item.avg_total_cost),
            borderColor: 'rgba(255, 99, 132, 1)',
            backgroundColor: 'rgba(255, 99, 132, 0.1)',
            fill: true,
            tension: 0.4
          }
        ]
      },
      options: {
        responsive: true,
        maintainAspectRatio: false,
        scales: {
          y: {
            beginAtZero: true,
            title: {
              display: true,
              text: 'Cost ($)'
            }
          }
        }
      }
    });

    // Filter buttons functionality
    document.getElementById('applyFilters').addEventListener('click', function() {
      const timeRange = document.getElementById('timeRangeFilter').value;
      // You would normally send this to the server via AJAX and refresh data
      alert(`Filters would be applied for: ${timeRange}`);
      // Simulating a refresh
      // window.location.href = `/admin/analytics?timeRange=${timeRange}`;
    });
  });
</script>
</body>
</html>
